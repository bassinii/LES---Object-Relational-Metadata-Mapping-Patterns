{"name":"LES - Object-Relational Metadata Mapping Patterns","tagline":"Trabalho 3 da disciplina de Laboratorio de Engenharia de Software","body":"### Metadata Mapping \r\n\r\nGuarda detalhes de mapeamento objeto-relacional em metadados.\r\n\r\n![](https://www.google.com.br/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&cad=rja&uact=8&ved=0CAcQjRw&url=http%3A%2F%2Fmartinfowler.com%2FeaaCatalog%2FmetadataMapping.html&ei=J3-aVe-PF4efNo7Oo5gP&bvm=bv.96952980,d.cWw&psig=AFQjCNHKoXASoLveXR89N1OvoKzCLGn5mQ&ust=1436274847864495)\r\n\r\n\r\n* O código que lida com o mapeamento objeto-relacional descreve como os campos no banco de dados correspondem a campos em objetos.\r\n* * Enfadonho\r\n* * Repetitivo.\r\n* Um mapeamento de metadados permite aos programadores definir os mapeamentos de uma forma simples, que então é processado pelo código genérico para realizar a leitura, inserção, e a atualização dos dados. \r\n\r\n#Como Funciona:\r\nA maior decisão em usar Metadados Mapeamento é a forma como as informações nos metadados se manifesta em termos de execução de código. Existem duas principais rotas a tomar:\r\n* * Geração de código;\r\n* * Programação reflexiva;\r\n\r\n## Geração de Código:\r\n* A aplicação recebe como entrada metadados e cuja saída é o código-fonte das classes que fazem o mapeamento. \r\n* As classes geradas nunca devem ser editadas manualmente.\r\n* Menos dinâmico\r\n* * quaisquer alterações no mapeamento requerem recompilação e redistribuição.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}